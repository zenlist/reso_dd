// THIS IS A GENERATED FILE
// If anything in this file needs to be updated, it needs to be fixed in reso_dd_generator
use serde::{Deserialize, Serialize};

/// [ActorType Lookups](https://ddwiki.reso.org/display/DDW17/ActorType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum ActorType {
    /// "[Agent](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243683)": The event was generated by what the source defines as a real estate professional
    Agent,

    /// "[Bot](https://ddwiki.reso.org/display/DDW17/Bot)": The event was generated by a bot or some type of scripting tool
    Bot,

    /// "[Client](https://ddwiki.reso.org/display/DDW17/Client)": The event was generated by what the source defines as a registered client
    Client,

    /// "[Consumer](https://ddwiki.reso.org/display/DDW17/Consumer)": The event was generated by what the source defines as a consumer
    Consumer,

    /// "[Unknown](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243687)": The generating Actor type could not be identified
    Unknown,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl crate::ResoEnumeration for ActorType {
    fn from_str(s: &str) -> ActorType {
        match s {
            "Agent" => ActorType::Agent,

            "Bot" => ActorType::Bot,

            "Client" => ActorType::Client,

            "Consumer" => ActorType::Consumer,

            "Unknown" => ActorType::Unknown,

            _ => ActorType::OpenEnumeration(s.into()),
        }
    }

    fn from_string(s: String) -> ActorType {
        match s.as_ref() {
            "Agent" => ActorType::Agent,

            "Bot" => ActorType::Bot,

            "Client" => ActorType::Client,

            "Consumer" => ActorType::Consumer,

            "Unknown" => ActorType::Unknown,

            _ => ActorType::OpenEnumeration(s),
        }
    }

    fn to_str(&self) -> &str {
        match self {
            ActorType::Agent => "Agent",

            ActorType::Bot => "Bot",

            ActorType::Client => "Client",

            ActorType::Consumer => "Consumer",

            ActorType::Unknown => "Unknown",

            ActorType::OpenEnumeration(ref s) => s,
        }
    }

    fn into_string(self) -> String {
        match self {
            ActorType::Agent => "Agent".into(),

            ActorType::Bot => "Bot".into(),

            ActorType::Client => "Client".into(),

            ActorType::Consumer => "Consumer".into(),

            ActorType::Unknown => "Unknown".into(),

            ActorType::OpenEnumeration(s) => s,
        }
    }

    fn fallback_value(&self) -> Option<&str> {
        match self {
            ActorType::OpenEnumeration(ref s) => Some(s),
            _ => None,
        }
    }
}

impl From<String> for ActorType {
    fn from(s: String) -> ActorType {
        match s.as_ref() {
            "Agent" => ActorType::Agent,

            "Bot" => ActorType::Bot,

            "Client" => ActorType::Client,

            "Consumer" => ActorType::Consumer,

            "Unknown" => ActorType::Unknown,

            _ => ActorType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for ActorType {
    fn from(s: &str) -> ActorType {
        match s {
            "Agent" => ActorType::Agent,

            "Bot" => ActorType::Bot,

            "Client" => ActorType::Client,

            "Consumer" => ActorType::Consumer,

            "Unknown" => ActorType::Unknown,

            _ => ActorType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a ActorType> for &'a str {
    fn from(s: &'a ActorType) -> &'a str {
        match s {
            ActorType::Agent => "Agent",

            ActorType::Bot => "Bot",

            ActorType::Client => "Client",

            ActorType::Consumer => "Consumer",

            ActorType::Unknown => "Unknown",

            ActorType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for ActorType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for ActorType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}
